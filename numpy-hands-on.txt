What is Python Numpy Array?
NumPy arrays are a bit like Python lists, but still very much different at the same time. 
For those of you who are new to the topic, let’s clarify what it exactly is and what it’s good for.
As the name kind of gives away, a NumPy array is a central data structure of the numpy library. 
The library’s name is actually short for "Numeric Python" or "Numerical Python".

Create a NumPy Array
myPythonList = [1,9,8,3]
numpy_array_from_list = np.array(myPythonList)
a  = np.array([1,9,8,3])				
numpy_array_from_list + 10
op: 
array([11, 19, 18, 13])

Shape of Array
import numpy as np
a  = np.array([1,2,3])
print(a.shape)
print(a.dtype)

op:
(3,)
int64

2 Dimension Array: You can add a dimension with a ","coma
c = np.array([(1,2,3),(4,5,6)])
print(c.shape)
(2, 3)

3 Dimension Array:
d = np.array([[[1, 2,3],[4, 5, 6]],[[7, 8,9],[10, 11, 12]]])
print(d.shape)
(2, 2, 3)

What is np.zeros and np.ones?
You can create a matrix full of zeroes or 
ones using np.zeros and np.one commands respectively.

Numpy Zero:
import numpy as np
np.zeros((2,2))
np.zeros((2,2), dtype=np.int16)

Numpy Once:
import numpy as np
np.ones((1,2,3), dtype=np.int16)			

In some occasions, you need to reshape the data from wide to long.
numpy.reshape() and numpy.flatten() in Python

import numpy as np
e  = np.array([(1,2,3), (4,5,6)])
print(e)
e.reshape(3,2)
op:
// Before reshape
[[1 2 3] 
 [4 5 6]]
//After Reshape
array([[1, 2],       
	[3, 4],       
	[5, 6]])	 

Flatten Data: When you deal with some neural network like convnet, 
you need to flatten the array. 
import numpy as np
e  = np.array([(1,2,3), (4,5,6)])
e.flatten()			
op:
array([1, 2, 3, 4, 5, 6])			

What is hstack?
With hstack you can appened data horizontally.
import numpy as np
f = np.array([1,2,3])
g = np.array([4,5,6])
print('Horizontal Append:', np.hstack((f, g)))
op:
Horizontal Append: [1 2 3 4 5 6]

What is vstack?
With vstack you can appened data vertically.
import numpy as np
f = np.array([1,2,3])
g = np.array([4,5,6])
print('Vertical Append:', np.vstack((f, g)))
op:
Vertical Append: [[1 2 3]
 [4 5 6]]
